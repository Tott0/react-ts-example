{"version":3,"sources":["landing/logo.svg","header/fixed-navbar/FixedNavbar.tsx","shared/components/FlexFiller/FlexFiller.tsx","shared/components/Container/Container.tsx","header/top-navbar/TopNavbar.tsx","header/Header.tsx","landing/Landing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","FixedNavbar","react_default","a","createElement","Navbar","bg","variant","Brand","href","Toggle","Collapse","Nav","className","NavItem","NavLink","to","Component","FlexFiller","this","props","noMin","children","Container","TopNavbar","components_Container_Container","components_FlexFiller_FlexFiller","Header","header_top_navbar_TopNavbar","header_fixed_navbar_FixedNavbar","Landing","src","logo","alt","target","rel","App","BrowserRouter","src_header_Header","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc92ac37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nimport \"./FixedNavbar.scss\";\r\n\r\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass FixedNavbar extends Component {\r\n  public render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">BitcoinWorld</Navbar.Brand>\r\n        <Navbar.Toggle />\r\n        <Navbar.Collapse>\r\n          <Nav className=\"auth-actions\">\r\n            <NavItem>\r\n              <NavLink to=\"/login\">\r\n                <span className=\"icon\">\r\n                  <i className=\"fas fa-user\" />\r\n                </span>\r\n                SIGN IN\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink to=\"/signup\">\r\n                <span className=\"icon\">\r\n                  <i className=\"fas fa-user-plus\" />\r\n                </span>\r\n                REGISTER\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FixedNavbar;\r\n","import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport \"./FlexFiller.scss\";\r\n\r\ninterface PropTypes {\r\n  noMin?: boolean;\r\n}\r\nclass FlexFiller extends Component<PropTypes> {\r\n  public render() {\r\n    return (\r\n      this.props.noMin ? <div className=\"flex-filler no-min\"> </div>: <div className=\"flex-filler\">\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlexFiller;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Container.scss\";\r\n\r\nclass Container extends Component {\r\n  public render() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./TopNavbar.scss\";\r\n\r\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport FlexFiller from \"../../shared/components/FlexFiller/FlexFiller\";\r\nimport Container from \"../../shared/components/Container/Container\";\r\n\r\nclass TopNavbar extends Component {\r\n  public render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\" className=\"top-navbar\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#home\">BitcoinWorld</Navbar.Brand>\r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse>\r\n            <FlexFiller />\r\n            <Nav className=\"auth-actions\">\r\n              <NavItem>\r\n                <NavLink to=\"/login\" className=\"btn-login\">\r\n                  <span className=\"icon\">\r\n                    <i className=\"fas fa-user\" />\r\n                  </span>\r\n                  SIGN IN\r\n                </NavLink>\r\n              </NavItem>\r\n              {/* <NavItem>\r\n              <NavLink to=\"/signup\">1\r\n                <span className=\"icon\">\r\n                  <i className=\"fas fa-user-plus\" />\r\n                </span>\r\n                REGISTER\r\n              </NavLink>\r\n            </NavItem> */}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopNavbar;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Header.scss\";\r\n\r\nimport FixedNavbar from \"./fixed-navbar/FixedNavbar\";\r\nimport TopNavbar from \"./top-navbar/TopNavbar\";\r\n\r\nclass Header extends Component {\r\n  public render() {\r\n    return (\r\n      <header className=\"app-header\">\r\n        <TopNavbar />\r\n        <FixedNavbar />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\n\r\nimport \"./Landing.scss\";\r\n\r\n// asd\r\n/** asdasd */\r\nclass Landing extends Component {\r\n  public render() {\r\n    return (\r\n      <div className=\"content\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nimport \"./App.scss\";\nimport Header from \"./header/Header\";\nimport Landing from \"./landing/Landing\";\n\n// asd\n/** asdasd */\nclass App extends Component {\n  public render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header/>\n          <Route exact path=\"/\" component={Landing} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}